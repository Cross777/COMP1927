Input Size          Initial Order          Duplicates         No. of runs          Avg time for usel          Avg time for sort
5,000                    random                    no                          3                             0.29s                                  0.0027s
5,000                    sorted                       no                          3                             0.20s                                  0.0027s
5,000                    reverse                     no                          3                              0.24s                                  0.0027s
5,000                    random                    yes                         3                             0.28s                                  0.0013s
5,000                    sorted                       yes                         3                             0.22s                                  0.0027s
5,000                    reverse                     yes                         3                              0.22s                                  0.0013s
10,000                 random                    no                          3                              0.93s                                  0.0013s
10,000                 sorted                       no                          3                             0.78s                                   0.0027s
10,000                 reverse                      no                          3                             0.61s                                   0.0080s
10,000                 random                    yes                         3                             1.03s                                   0.0027s
10,000                 sorted                       yes                         3                             0.87s                                   0.0027s
10,000                 reverse                     yes                         3                             0.77s                                   0.0093s
50,000                 random                    no                          3                             39s                                       0.068s
50,000                 sorted                       no                          3                             11s                                       0.039s
50,000                 reverse                      no                          3                            14s                                       0.044s
50,000                 random                    yes                         3                             20s                                       0.048s
50,000                 sorted                       yes                         3                             15s                                       0.032s
50,000                 reverse                     yes                         3                             13s                                       0.048s

Average times given to 2 significant figures.

Commands:
- No duplicates
   * seq NUM | sort -[nrR] > x
   * time ./usel < x
   * time sort -n < x
- Duplicates
   * ./randl NUM | sort [-nrR] > x
   * time ./usel < x
   * time sort -n < x

Patterns:
The IntListInsertInOrder function I completed deals primarily with three cases for the next integer being read into the linked list: (i) smallest value, (ii) largest value, and (iii) somewhere in the middle. As the number of inputs increases, each time an integer is case (iii), it will have to traverse the entire linked list until it reaches the correct position for insertion. Hence, for a large number of randomly ordered integers, this will take a significant amount of time (it is slightly faster if they are already sorted in ascending or reverse order). Such a process is very inefficient with large input sizes, whereas the Linux sort command most likely uses an optimised algorithm for whichever parameter/flag is specified, allowing it to maintain much lower sorting times. 